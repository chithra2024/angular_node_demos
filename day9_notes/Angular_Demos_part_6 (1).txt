Unit Testing Jasmine 
=====================
Angular unit testing :
=======================
Jasmine -> Framework
Test runner -> Karma
Web browser -> execution environment

In Component based testing,
Every individual component can be tested
File extension-> ex: Appcomponent.spec.ts file
===========================================
to test your angular app : use this command
ng test
============================================
Syntax for unit testing - .spec.ts

describe -> Test Suite, it takes two parameter, first parameter is name, second parameter is function or call back function
it -> Test spec,it takes two parameter, first parameter is name, second parameter is function or call back function
expect -> expectation for the given spec
---------------------------------------------

beforeEach, afterEach, beforeAll,afterAll

TestBed -> simulate user interaction
	-> to create DOM associated with components

ng test vs  ng serve

Test -> examine component state

Note : one Test suite can have multiple spec
=================================================

Demo1: unit testing
===================
1. ng new <appname>
2. Erase the code in app.component.html
and place the following code.



<div class="content">
<span>app is running!</span>
</div>

3. Please ensure your app.component.ts has the following code.

import { TestBed } from '@angular/core/testing';
import { AppComponent } from './app.component';

describe('AppComponent', () => {
  beforeEach(() => TestBed.configureTestingModule({
    declarations: [AppComponent]
  }));

  it('should create the app', () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app).toBeTruthy();
  });


  it('should render title', () => {
    const fixture = TestBed.createComponent(AppComponent);
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('.content span')?.textContent).toContain('app is running!');
  });
});


4. go cmd prompt> ng test

5. Please ensure  success in test cases and  Karma v6.4.2 server started at http://localhost:9876/
place this url in the browser.

========================================================================================
Demo2: 
======
1. add  the code in app.component.ts file

  it('should render title', () => {
    const fixture = TestBed.createComponent(AppComponent);
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('p')?.textContent).toContain('UnitTesting app is running!');
  });

2. add the code in app.componnt.html file

<p>UnitTesting app is running!</p>

3. ng test
=========================================================================================
Demo3:
======
other way to create test spec is 

1. add the code in app.component.ts file

it('should render By.css', () => {
    const fixture = TestBed.createComponent(AppComponent);
    const paraDe:DebugElement=fixture.debugElement;
const paragraphDe=paraDe.query(By.css('p'));
const p:HTMLElement=paragraphDe.nativeElement;
expect(p.textContent).toContain('UnitTesting app is running!');
  
  });

2. ng test
Ensure, success in test cases
===========================================================================================
Demo4:
======
other way to create test spec is 

1. add the code in app.component.ts file

  it('should render title', () => {
    const fixture = TestBed.createComponent(AppComponent);
    const paraDe:DebugElement=fixture.debugElement;
    const paraE1:HTMLElement=paraDe.nativeElement;
    expect(paraE1.querySelector('p')?.textContent).toContain('UnitTesting app is running!');
 
  });

2. ng test
Ensure, success in test cases
=============================================================================================
User interaction 
ng serve --open

vs

ng test
(TestBed-> simulate)

=======================================================================================
Demo5: Service component testing
================================
1. ng g s niitservice

2. In niitservice.service.ts

import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class NiitserviceService {

  constructor() { }
  add(a: number, b: number): number {
    return a + b;
  }
}

3. In niitservice.service.spec.ts

import { TestBed } from '@angular/core/testing';

import { NiitserviceService } from './niitservice.service';

describe('NiitserviceService', () => {
  let service: NiitserviceService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(NiitserviceService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });

  it("should add two numbers", () => {
    let result = service.add(2, 3);
    expect(result).toEqual(5);
  });


});

4. ng test

Ensure, success in test cases

===================================================================
Demo6: spyon method
===================
1. ng g s incdec
2. In incdec.service.ts

import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class IncdecService {

  constructor() { }

  value=0;
  increment(){
    this.value+=1;
  }
  decrement(){
    this.value-=1;
  }
}

3. In app.component.html

<h1>Welcome to Angular</h1>
<div class="content">
<span>app is running!</span>
</div>

<p>UnitTesting app is running!</p>

<h1>{{ incdecService.value }}</h1>

<button (click)="increment()" class="increment">Increment</button>

<button (click)="decrement()" class="decrement">Decrement</button>

4. In app.component.ts


import { Component } from '@angular/core';
import { IncdecService } from './incdec.service';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'filestructure';

  constructor(public incdecService:IncdecService){}
  increment() {
    this.incdecService.increment();
  }
  
  decrement() {
    this.incdecService.decrement();
  }
  
}

5. In app.component.spec.ts

import { ComponentFixture, TestBed } from '@angular/core/testing';
import { AppComponent } from './app.component';
import { DebugElement } from '@angular/core';
import { By } from '@angular/platform-browser';
import { IncdecService } from './incdec.service';

describe('AppComponent', () => {
  let fixture: ComponentFixture<AppComponent>;
  let debugElement: DebugElement;
  let incrementDecrementService: IncdecService;
  let incrementSpy: any;

  beforeEach(async() => {TestBed.configureTestingModule({
    declarations: [AppComponent]
  }).compileComponents();
  fixture = TestBed.createComponent(AppComponent);
  debugElement = fixture.debugElement;
  incrementDecrementService = debugElement.injector.get(IncdecService);
  incrementSpy = spyOn(incrementDecrementService, 'increment').and.callThrough();
}
  
  );

  it('should create the app', () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app).toBeTruthy();
  });

  it(`should have as title 'filestructure'`, () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app.title).toEqual('filestructure');
  });

  it('should render .content span', () => {
    const fixture = TestBed.createComponent(AppComponent);
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('.content span')?.textContent).toContain('app is running!');
  });

    it('should render By.css', () => {
    const fixture = TestBed.createComponent(AppComponent);
    const paraDe:DebugElement=fixture.debugElement;
const paragraphDe=paraDe.query(By.css('p'));
const p:HTMLElement=paragraphDe.nativeElement;
expect(p.textContent).toContain('UnitTesting app is running!');
  
  });

  it('should render title', () => {
    const fixture = TestBed.createComponent(AppComponent);
    const paraDe:DebugElement=fixture.debugElement;
    const paraE1:HTMLElement=paraDe.nativeElement;
    expect(paraE1.querySelector('p')?.textContent).toContain('UnitTesting app is running!');
 
  });


  it('should render title', () => {
    const fixture = TestBed.createComponent(AppComponent);
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('p')?.textContent).toContain('UnitTesting app is running!');
  });

  it('should call increment on the service', () => {
    debugElement
      .query(By.css('button.increment'))
      .triggerEventHandler('click', null);
  
    expect(incrementDecrementService.value).toBe(1);
    expect(incrementSpy).toHaveBeenCalled();
    expect(incrementSpy).toHaveBeenCalledTimes(1);
   expect(incrementSpy).not.toHaveBeenCalledWith('error');
  
  });


});


6. ng test

Ensure, success in test cases
========================================================================